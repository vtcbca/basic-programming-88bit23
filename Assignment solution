solution:1
import math

def factorial_list_comprehension(n):
    return math.prod([i for i in range(1, n + 1)])
print(factorial_list_comprehension(n))

solution:2
primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29}  # A small set of prime numbers

def is_prime_set(n):
    if n <= 1:
        return False
    if n in primes:
        return True
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            primes.add(n)  # If prime, add it to the set for future checks
            return False
    primes.add(n)  # If prime, add it to the set for future checks
    return True
print(is_prime_set(n))      

solution:3
def fibonacci_recursive_max(max_value, a=0, b=1, sequence=None):
    if sequence is None:
        sequence = []
    if a > max_value:
        return sequence
    sequence.append(a)
    return fibonacci_recursive_max(max_value, b, a + b, sequence)
print(fibonacci_recursive_max(max_value))  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

solution:4
def reverse_string_stack(s):
    stack = list(s)
    reversed_string = ""
    while stack:
        reversed_string += stack.pop()
    return reversed_string
print(reverse_string_stack(s))  

solution:5
def is_palindrome_stack(s):
    # Remove non-alphanumeric characters and convert to lowercase
    s = ''.join(char.lower() for char in s if char.isalnum())
    stack = list(s)
    for char in s:
        if char != stack.pop():
            return False
    return True
print(is_palindrome_stack(s))    

solution:6
def pattern_recursive(n, current=1):
    if current > n:
        return
    print('* ' * current)  # Print the current row with current stars
    pattern_recursive(n, current + 1)  # Recursive call for the next row
pattern_recursive(n)

solution:7
def triangle_pattern_recursive(n, current=1):
    if current > n:
        return
    
    # Print leading spaces
    print(' ' * (n - current), end='')
    
    # Print numbers in increasing order
    for i in range(1, 2 * current):
        print(i, end=' ')
    print()  # Move to the next line
    
    # Recursively call for the next row
    triangle_pattern_recursive(n, current + 1)
print("\nUsing recursion:")
triangle_pattern_recursive(n)

solution:8
def alphabet_pattern_recursive(n, current=1):
    if current > n:
        return
    
    # Print leading spaces
    print(' ' * (n - current), end='')
    
    # Print first half of the alphabet sequence
    for i in range(1, current + 1):
        print(chr(64 + i), end=' ')

    # Print second half of the alphabet sequence
    for i in range(current - 1, 0, -1):
        print(chr(64 + i), end=' ')

    print()  # Move to the next line
    
    # Recursively call for the next row
    alphabet_pattern_recursive(n, current + 1)
print("\nUsing recursion:")
alphabet_pattern_recursive(n)
